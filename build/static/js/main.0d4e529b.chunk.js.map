{"version":3,"sources":["serviceWorker.js","Redux/actions/submittedValueActions.js","React_Components/Input.js","React_Components/Output.js","React_Components/App.js","Redux/store.js","Redux/reducers/submittedValueReducer.js","index.js"],"names":["Boolean","window","location","hostname","match","SUBMIT_VALUE","Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","defaultInput","handleChange","bind","assertThisInitialized","handleSubmit","handleReset","event","setState","target","value","onSubmitValue","preventDefault","react_default","a","createElement","onSubmit","onReset","type","onChange","Component","mapActionsToProps","input","payload","submittedValue","connect","Output","split","reverse","join","reverseString","document","require","App","className","React_Components_Input","React_Components_Output","allReducers","combineReducers","arguments","length","undefined","action","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","React_Components_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iJClBOC,EAAe,mBCOtBC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,WAAcR,EAAKD,MAAMU,cAG7BT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKc,YAAcd,EAAKc,YAAYH,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARJA,4EAWNe,GACTZ,KAAKa,SAAS,CAAER,WAAYO,EAAME,OAAOC,6CAGhCH,GACTZ,KAAKJ,MAAMoB,cAAchB,KAAKI,MAAMC,YACpCO,EAAMK,qDAGEL,GACRZ,KAAKa,SAAS,CAAER,WAAY,KAC5BO,EAAMK,kDAKN,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUrB,KAAKU,aAAcY,QAAStB,KAAKW,aAC7CO,EAAAC,EAAAC,cAAA,uBACWF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOR,MAAOf,KAAKI,MAAMC,WAAYmB,SAAUxB,KAAKO,gBAE3EW,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASR,MAAM,WAC3BG,EAAAC,EAAAC,cAAA,SAAOG,KAAK,QAAQR,MAAM,mBAnC1BU,aAmDdC,EAAoB,CACtBV,cDvDG,SAAqBW,GACxB,MAAO,CACHJ,KAAM7B,EACNkC,QAAS,CACLC,eAAgBF,MCgEbG,cArBS,SAAC1B,EAAOR,GAC5B,MAAO,CACHU,aAAcV,EAAMU,aAAe,IAAMF,EAAMyB,iBAmBfH,EAAzBI,CAA4CnC,GClErDoC,wLACYJ,GACV,OAAOA,EAAMK,MAAM,IAAIC,UAAUC,KAAK,qCAItC,OACIhB,EAAAC,EAAAC,cAAA,sBACapB,KAAKmC,cAAcnC,KAAKJ,MAAMiC,wBARlCJ,aAmBNK,cALS,SAAA1B,GACpB,OAAOA,GAII0B,CAAyBC,KClBnB,qBAAXzC,SACNA,OAAO8C,WAAY9C,OAAO8C,SAAShB,gBAGrCiB,EAAQ,QAcKC,mLATX,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACoB,EAAD,CAAOlC,aAAc,iBACrBY,EAAAC,EAAAC,cAACqB,EAAD,cALUhB,qBCRlB,IAAMiB,EAAcC,YAAgB,CAChCd,eCFW,WAAqD,IAAtBzB,EAAsBwC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,KAAMG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChE,OAAQC,EAAOxB,MACX,KAAK7B,EACD,OAAOqD,EAAOnB,QAAQC,eAC1B,QACI,OAAOzB,MDMN4C,EAAQC,YACjBP,EACA,CACIb,eAAgB,sDAEpBvC,OAAO4D,8BAAgC5D,OAAO4D,gCERlDC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUL,MAAOA,GAAO9B,EAAAC,EAAAC,cAACkC,EAAD,OAAoBlB,SAASmB,eAAe,SPoH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0d4e529b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const SUBMIT_VALUE = 'SUBMIT_VALUE';\n\n// The function, submitValue, is an 'action creator'\n// The return value is an 'action'\nexport function submitValue(input) {\n    return {\n        type: SUBMIT_VALUE,\n        payload: {\n            submittedValue: input\n        }\n    }\n}","// React Imports\nimport React, { Component } from 'react';\n\n// Redux Imports\nimport { connect } from 'react-redux';\nimport { submitValue } from '../Redux/actions/submittedValueActions';\n\nclass Input extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            'inputValue': this.props.defaultInput,\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ inputValue: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.props.onSubmitValue(this.state.inputValue);\n        event.preventDefault();\n    }\n\n    handleReset(event) {\n        this.setState({ inputValue: ''});\n        event.preventDefault();\n    }\n\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\n                    <label>\n                        Input: <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                    <input type=\"reset\" value=\"Clear\" />\n                </form>\n            </div>\n        );\n    }\n}\n\n// state is the state from Redux Store\n// props is the props from the parent component (which is App.js in this case)\nconst mapStateToProps = (state, props) => {\n    return {\n        defaultInput: props.defaultInput + ' ' + state.submittedValue\n    };\n};\n\n// onSubmitValue is used to avoid naming conflicts with submitValue\nconst mapActionsToProps = {\n    onSubmitValue: submitValue\n}\n\n// Connecting mapStateToProps lets this component use this.props to get state from the Redux Store and props from the parent component.\n// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// this.props can actually be used normally to get props from the parent, without mapStateToProps.\n// However, mapStateToProps can be used to avoid naming conflicts \n// (Example: Imagine defaultInput is a prop on both the Redux Store and the parent. To fix, return defaultInputParent and defaultInputReduxStore in mapStateToProps).\n// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// By default, the Redux Store takes priority over parent props in this.props.\n// If Redux state is not needed, this code can be used: connect(null, mapActionsToProps)(Input)\n// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n// Connecting mapActionsToProps lets this component use actions defined in ../Redux/actions from this.props\nexport default connect(mapStateToProps, mapActionsToProps)(Input);","// React Imports\nimport React, { Component } from 'react';\n\n// Redux Imports\nimport { connect } from 'react-redux';\n\nclass Output extends Component {\n    reverseString(input) {\n        return input.split('').reverse().join('');\n    }\n\n    render() {\n        return (\n            <div>\n                Output: {this.reverseString(this.props.submittedValue)}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return state;\n}\n\n// Connecting mapStateToProps lets this component get state from the Redux Store as this.props\nexport default connect(mapStateToProps)(Output);","// React Imports\nimport React, { Component } from 'react';\nimport Input from './Input';\nimport Output from './Output';\n\n// CSS Import (this style is used when testing React Components on Node.js instead of the Browser)\nconst canUseDOM = !!(\n  (typeof window !== 'undefined' &&\n    window.document && window.document.createElement)\n);\nif (canUseDOM) {\n  require('./App.css');\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Input defaultInput={'Hello World!'}/>\n        <Output />\n      </div>\n    );\n  }\n}\n\nexport default App;","import { createStore, combineReducers } from 'redux';\nimport submittedValueReducer from './reducers/submittedValueReducer';\n\n// combineReducers takes in multiple reducers, and returns a single reducer to be used in the createStore(...) function.\n// combineReducers takes in multiple 'key : value' pairs to combine the reducers.\n// The key is the name of variable within state (in the redux store), and the value is the reducer used to change that variable.\nconst allReducers = combineReducers({\n    submittedValue: submittedValueReducer\n});\n\n// createStore takes in 3 parameters: 1. Reducer 2. preloadedState 3. Enhancer.\n// In this case: \n// 1. Is the allReducer defined above\n// 2. Are the intial values of the state within the redux store\n// 3. Allows the store to be viewed within the Redux Tools Extension, a recommended tool when working with Redux.\n// https://redux.js.org/api/createstore\nexport const store = createStore(\n    allReducers,\n    {\n        submittedValue: ')sdrawkcaB ti daeR( Nothing has been submitted yet'\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import { SUBMIT_VALUE } from '../actions/submittedValueActions';\n\n// null is set as the default value here for state, because Redux will complain if state is undefined. \n// You can set initial state here, but it is recommended on the Redux documentation to preload the state within the redux store. \n// https://redux.js.org/recipes/structuring-reducers/initializing-state\nexport default function submittedValueReducer(state = null, action) {\n    switch (action.type) {\n        case SUBMIT_VALUE:\n            return action.payload.submittedValue;\n        default:\n            return state;\n    }\n}","// Other Imports\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\n// React Imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './React_Components/App';\n\n// Redux Imports\nimport { Provider } from 'react-redux';\nimport { store } from './Redux/store';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}